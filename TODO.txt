The TODO list has migrated to the GitHub project issues page:

* https://github.com/pibara/MattockFS/issues

The following TODO items have been completed between the time that I've handed in my paper for grading:

* Decouple longpath implementation in such a way that workers don't need to ever
  directly access redis.
* Maintain state in journal for restore of anycast state after restart.
* Framework fadvise hooks: Different file-types can have file-type specific
  processing and expected access patterns. It is likely that providing
  hooks for allowing the framework to predict such patterns could allow
  the file-system to set smarter fadvise values that might further reduce
  spurious reads and improve page-cache efficiency.
* Re-factor sorting to picking: While the picking policies are suitable for
  a proof of concept, some policies have shown to have poor scalability
  properties in their current implementation. It is likely that moving
  from a sorting type algorithm to a more picking oriented algorithm
  would lead to a more efficient picking process for some of these policies,
  especially for larger sets.
* Create a presentation video about MattockFS : https://www.youtube.com/watch?v=hJCqBLfEN7Y
* Make MattockFS multi-process, starting a default of four archives per node.
  This should be a first step towards allowing multi node meshups to be created with MattockFS.
* Added a simple example program, implementing an mmls wrapper without throttling support.
  I hope this can help others an easier steppingstone to figuring out how to use MattockFS.

